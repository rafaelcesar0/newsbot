import { openai } from '@ai-sdk/openai'
import { streamText, tool } from 'ai'
import { z } from 'zod'

export const maxDuration = 60

interface SearchResult {
  title: string
  link: string
  snippet: string
}

async function performWebSearch(query: string): Promise<SearchResult[]> {
  console.log(`üîç [Busca Web] Iniciando busca por: "${query}"`)

  // Simula lat√™ncia da API
  await new Promise((resolve) => setTimeout(resolve, 2000))

  const lowerQuery = query.toLowerCase()

  if (lowerQuery.includes('next.js') || lowerQuery.includes('nextjs')) {
    console.log('üìÑ Retornando resultados sobre Next.js')
    return [
      {
        title: 'Next.js 15: Novidades e Recursos | Blog Vercel',
        link: 'https://vercel.com/blog/next-js-15',
        snippet:
          'O Next.js 15 introduz o React Compiler (experimental), melhorias no caching, otimiza√ß√µes no Turbopack e muito mais. Principais novidades incluem suporte aprimorado para React 19 e melhor performance.',
      },
      {
        title: 'Documenta√ß√£o Oficial do Next.js',
        link: 'https://nextjs.org/docs',
        snippet:
          'A documenta√ß√£o oficial para aprender sobre os recursos do Next.js, incluindo App Router, Server Components e muito mais.',
      },
    ]
  }

  if (lowerQuery.includes('tempo') || lowerQuery.includes('clima')) {
    console.log('üå§Ô∏è Retornando resultados sobre clima')
    return [
      {
        title: 'Previs√£o do Tempo para S√£o Paulo, SP - Climatempo',
        link: 'https://www.climatempo.com.br/previsao-do-tempo/cidade/558/saopaulo-sp',
        snippet:
          'Confira a previs√£o do tempo atualizada para S√£o Paulo: Parcialmente nublado com m√°ximas de 28¬∞C e m√≠nimas de 18¬∞C. Possibilidade de chuva √† tarde.',
      },
    ]
  }

  if (
    lowerQuery.includes('brasil') ||
    lowerQuery.includes('not√≠cias') ||
    lowerQuery.includes('pol√≠tica')
  ) {
    console.log('üì∞ Retornando resultados sobre not√≠cias do Brasil')
    return [
      {
        title: 'Portal G1 - Principais Not√≠cias do Brasil',
        link: 'https://g1.globo.com/',
        snippet:
          'Acompanhe as principais not√≠cias do Brasil e do mundo em tempo real. Pol√≠tica, economia, esportes e muito mais.',
      },
      {
        title: 'Folha de S.Paulo - Not√≠cias',
        link: 'https://www1.folha.uol.com.br/',
        snippet:
          'Jornal Folha de S.Paulo online. Not√≠cias sobre pol√≠tica, economia, cultura, esporte, cotidiano e opini√£o.',
      },
    ]
  }

  if (
    lowerQuery.includes('intelig√™ncia artificial') ||
    lowerQuery.includes('ia') ||
    lowerQuery.includes('ai')
  ) {
    console.log('ü§ñ Retornando resultados sobre IA')
    return [
      {
        title: 'OpenAI - Intelig√™ncia Artificial Avan√ßada',
        link: 'https://openai.com/',
        snippet:
          'A OpenAI desenvolve IA segura e ben√©fica para a humanidade. Conhe√ßa o ChatGPT, GPT-4 e outras tecnologias revolucion√°rias.',
      },
      {
        title: 'Google AI - Pesquisa e Desenvolvimento',
        link: 'https://ai.google/',
        snippet:
          'Pesquisa de ponta em intelig√™ncia artificial do Google, incluindo machine learning, deep learning e aplica√ß√µes pr√°ticas.',
      },
    ]
  }

  // Resultado gen√©rico para outras consultas
  console.log('üîç Retornando resultado gen√©rico')
  return [
    {
      title: `Resultados de busca para: ${query}`,
      link: 'https://www.google.com/search?q=' + encodeURIComponent(query),
      snippet: `Encontrei informa√ß√µes relacionadas a "${query}". Esta √© uma simula√ß√£o de busca - em um sistema real, aqui apareceriam resultados reais da web sobre este t√≥pico.`,
    },
  ]
}

export async function POST(req: Request) {
  try {
    const { messages } = await req.json()
    console.log('üí¨ Recebendo mensagens:', messages.length)

    const systemMessage = {
      role: 'system',
      content: `Voc√™ √© um assistente prestativo em portugu√™s brasileiro que pode:

1. **Analisar not√≠cias** quando um link for fornecido
2. **Responder perguntas gerais** sobre qualquer t√≥pico
3. **Realizar buscas na web** quando necess√°rio para obter informa√ß√µes atualizadas

## Quando usar a ferramenta de busca web:
- O usu√°rio perguntar sobre eventos recentes ou atuais
- Precisar de informa√ß√µes espec√≠ficas que podem ter mudado recentemente
- O usu√°rio solicitar explicitamente uma busca ("busque", "pesquise", "procure")
- N√£o tiver certeza sobre informa√ß√µes que podem estar desatualizadas
- O usu√°rio perguntar sobre not√≠cias, clima, cota√ß√µes, etc.

## Como responder:
- Use **markdown** para formatar suas respostas
- Quando usar resultados de busca, sempre mencione que obteve as informa√ß√µes atrav√©s de uma pesquisa na web
- Cite as fontes quando poss√≠vel usando links
- Seja sempre √∫til, preciso e responda em portugu√™s brasileiro
- Use formata√ß√£o markdown para destacar informa√ß√µes importantes

Exemplo de resposta com busca:
**Baseado em uma busca na web, encontrei as seguintes informa√ß√µes:**

1. **[T√≠tulo da fonte](link)**
   - Informa√ß√£o relevante aqui

2. **[Outra fonte](link)**
   - Mais informa√ß√µes aqui

**Resumo:** Sua an√°lise e conclus√£o aqui.`,
    }

    const messagesWithSystem = [systemMessage, ...messages]

    console.log('ü§ñ Iniciando streamText com ferramentas')

    const result = await streamText({
      model: openai('gpt-4o'),
      messages: messagesWithSystem,
      temperature: 0.7,
      maxTokens: 2000,
      tools: {
        searchWeb: tool({
          description: `Busca informa√ß√µes atualizadas na web sobre qualquer t√≥pico.

          Use esta ferramenta quando:
          - O usu√°rio perguntar sobre eventos recentes
          - Precisar de informa√ß√µes que podem ter mudado
          - O usu√°rio solicitar explicitamente uma busca
          - Perguntas sobre not√≠cias, clima, cota√ß√µes, etc.

          Sempre formate os resultados em markdown e cite as fontes.`,
          parameters: z.object({
            query: z
              .string()
              .describe(
                'A consulta de busca detalhada em portugu√™s para encontrar informa√ß√µes na web',
              ),
          }),
          execute: async ({ query }) => {
            console.log(
              `üîß Ferramenta searchWeb executada com query: "${query}"`,
            )
            try {
              const searchResults = await performWebSearch(query)
              const formattedResults = searchResults
                .map(
                  (r, index) =>
                    `${index + 1}. **[${r.title}](${r.link})**\n   ${r.snippet}`,
                )
                .join('\n\n')

              const result = `## Resultados da busca na web para "${query}":

${formattedResults}

---
*Informa√ß√µes obtidas atrav√©s de busca na web*`

              console.log(
                '‚úÖ Busca conclu√≠da, retornando resultados formatados',
              )
              return result
            } catch (error) {
              console.error('‚ùå Erro na busca web:', error)
              return `**Erro na busca:** Desculpe, ocorreu um erro ao buscar informa√ß√µes sobre "${query}". Tente novamente ou reformule sua pergunta.`
            }
          },
        }),
      },
    })

    console.log('üì§ Retornando resposta stream')
    return result.toDataStreamResponse()
  } catch (error) {
    console.error('‚ùå Erro na API do chat:', error)
    return new Response(JSON.stringify({ error: 'Erro interno do servidor' }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' },
    })
  }
}
